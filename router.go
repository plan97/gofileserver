package gofileserver

import (
	"net/http"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/olebedev/staticbin"
	"github.com/plan97/gofileserver/config"
	"github.com/plan97/gofileserver/handlers"
)

//go:generate go-bindata -pkg gofileserver -prefix dist/go-file-server dist/go-file-server/...

// Serve using the provided configuration.
func Serve(c *config.Config) (err error) {
	gin.SetMode(gin.ReleaseMode)

	router := gin.Default()
	if c.AllowCors {
		router.Use(cors.Default())
	}

	static := router.Group("/static")
	static.Static("", c.BaseDir)

	zipDir := router.Group("/dir_zip")
	zipDir.GET("*dir", handlers.ZipDir(c.BaseDir))

	api := router.Group("/api")
	api.POST("list_dir_files", handlers.ListDirFiles(c.BaseDir))

	// Serves the "static" directory's files from binary data.
	// You have to pass the "Asset" function generated by
	// go-bindata (https://github.com/jteeuwen/go-bindata).
	router.Use(staticbin.Static(Asset, staticbin.Options{
		// Dir prefix will be trimmed. It needs to separate namespace.
		Dir:         "",
		IndexFile:   "index.html",
		SkipLogging: true,
	}))

	router.NoRoute(func(c *gin.Context) {
		c.Redirect(http.StatusTemporaryRedirect, "/")
	})

	if c.HTTPS {
		err = router.RunTLS(c.Addr, c.SSLCertFile, c.SSLKeyFile)
	} else {
		err = router.Run(c.Addr)
	}
	return
}
